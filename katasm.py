import sys
from parser import AsmParser

if __name__ == "__main__" :
	import argparse

	parser = argparse.ArgumentParser(description="Kat dumb aassembler")


	parser.add_argument("source_file",
						help="Source file to read")
	parser.add_argument("dest_file",
						help="Destination binary file")
	parser.add_argument("--fill-instr",
						type=int,
						default=0,
						help="Fill with nop for minimum n instructions")
	parser.add_argument("--fill-mem",
						type=int,
						default=0,
						help="Fill with 0 for minimum n bytes")
	parser.add_argument("--explain","-e",
						type=str,
						default=None,
						help="Store the explained thinggy")
	parser.add_argument("--translate-file","-t",
						type=str,
						default=None,
						help="Store the OPcode translate thinggy")
	parser.add_argument("--coe",
						type=str,
						default=None,
						help=".coe output for xillinx loading.")

	args = parser.parse_args()

	if args.translate_file is not None :
		with open(args.translate_file,"w") as translate_table :
			translating = ""
			for opcode, value in AsmParser.opcodes.items() :
				if opcode == "wrl" :
					for i in range(0,16) :
						translating += f"3{i:01X}\t{opcode}{i:01X}\n"
				else :
					translating += f"{value[:2]}\t{opcode}\n"
			translate_table.write(translating)

	with open(args.source_file,"r") as code:
		data = code.read()

		codeparse = AsmParser()

		#codeparse.analyze(""":start cjmpl :start""")

		codeparse.analyze(data)
		codeparse.forward_label_replace()
		output_hex = codeparse.asmed_code
		words_len = codeparse.mem_cnt
		print(output_hex)

		if words_len < args.fill_instr :
			codeparse.asmed_code += "00 0000\n"* (args.fill_instr-words_len)
		output_hex = codeparse.asmed_code


		mem_len = len(codeparse.compressed_code) / 2
		if mem_len < args.fill_mem :
			output_hex += "FF"*(args.fill_mem-mem_len)


		print(codeparse.human)
		if args.explain is not None :
			with open(args.explain,"w") as expl :
				expl.write(codeparse.human)
		with open(args.dest_file,"wb") as out:
			out.write(bytearray.fromhex(output_hex))
		if args.coe is not None :
			with open(args.coe,"w") as coe_file :
				coe_file.write("; Coe file generated by KATASM\n")
				coe_file.write("memory_initialization_radix=16;\n")
				coe_file.write("memory_initialization_vector =\n")
				coe_file.write(output_hex.replace("\n\n","\n").replace(" ","").replace("\n",",\n")[:-2])
				coe_file.write(";")
	print("Done.")



